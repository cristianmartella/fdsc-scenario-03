## Authentication Services

# -- Verifiable Credentials Verifier
vcverifier:
  # make the verifier publicly accessible
  ingress:
    enabled: true
    hosts:
      - host: provider-verifier.127.0.0.1.nip.io
        paths:
          - "/"
  deployment:
    logging:
      level: DEBUG
    verifier:
      # address of the trust anchor
      tirAddress: http://tir.127.0.0.1.nip.io:8080/
      did: "did:key:zDnaee6Q14pEC1F9e4buW5PdQMDpq3NCTDUycBQ6PuLyri1oA"
    # public address of the verifier, to be provided as oid-config
    server:
      host: http://provider-verifier.127.0.0.1.nip.io:8080
    # access to the internal credentials-config-service
    configRepo:
      configEndpoint: http://credentials-config-service:8080

# -- Credentials Config Service
credentials-config-service:
  enabled: true

# -- Trusted Issuers List
trusted-issuers-list:
  # only open for demo purposes
  ingress:
    til:
      enabled: true
      hosts:
        - host: til-provider.127.0.0.1.nip.io
          paths:
            - /

# -- MySql database for TIL
mysql:
  primary:
    persistence:
      enabled: true      
      # use one of the classes provided by your cluster
      storageClass: local-path


## Authorization Services

# -- APISIX - PEP
# -- apisix configuration
apisix:
  image:
    debug: true
  controlPlane:
    ###########################################################
    sidecars:
      # ### DEPRECATED: not needed anymore, use the data service instead
      # - name: register-ccs
      #   image: alpine:latest
      #   imagePullPolicy: IfNotPresent
      #   command: ["/bin/sh", "-c", "
      #     apk add --no-cache curl jq;
      #     payload='{\"id\":\"rustapitest-service\",\"defaultOidcScope\":\"default\",\"oidcScopes\":{\"default\":[{\"type\":\"UserCredential\",\"trustedParticipantsLists\":[\"http://tir.trust-anchor.svc.cluster.local:8080\"],\"trustedIssuersLists\":[\"http://trusted-issuers-list:8080\"]}],\"operator\":[{\"type\":\"OperatorCredential\",\"trustedParticipantsLists\":[\"http://tir.trust-anchor.svc.cluster.local:8080\"],\"trustedIssuersLists\":[\"http://trusted-issuers-list:8080\"]}]}}';
      #     status_code=0;
      #     response='';
      #     echo \"Registering service with credentials-config-service\";
      #     while [ $status_code -ne 200 ] || [ -z $response ]; do
      #       echo \"Sending request\";
      #       response=$(curl -X POST http://credentials-config-service:8080/service \
      #         -H \"Content-Type: application/json\" \
      #         -d \"$payload\");
      #       status_code=$(echo $response | jq -r '.status');
      #       echo \"Response status code: $status_code\";
      #       echo \"Response body: $response\";
      #     done;
      #     echo \"Service registered successfully\";
      #     sleep infinity;
      #     "
      #   ]

      - name: test-maintenance
        image: alpine:latest
        imagePullPolicy: IfNotPresent
        command:
          - /bin/sh
          - -c
          - 'apk add curl; while true; do echo "Hello!"; sleep 30; done'

      - name: rustapitest
        image: cristianmartella/rustapitest:0.1.1
        imagePullPolicy: Always
        ports:
          - name: http
            containerPort: 8085
            protocol: TCP
    service:
      extraPorts:
      - name: rustapitest-port
        port: 8085
        targetPort: 8085


    # ingress:
    #   enabled: true
    #   hostname: rustapitest.127.0.0.1.nip.io
    #   paths:
    #     - "/"
    #   pathType: Prexix
    #   serviceName: provider-dsc-apisix-control-plane
    #   servicePort: 8085
    ###########################################################

  dataPlane:
    # -- configure the ingress to the data service
    ingress:
      enabled: true
      hostname: mp-data-service.127.0.0.1.nip.io
      # -- configure the ingress to the tmf-api
      extraHosts:
        - name: mp-tmf-api.127.0.0.1.nip.io
          path: /
        - name: rustapitest.127.0.0.1.nip.io
          path: /
      extraPaths:               
  catchAllRoute:
    enabled: false
  routes: |-
    - uri: /.well-known/openid-configuration
      host: mp-data-service.127.0.0.1.nip.io
      upstream:
        nodes:
          verifier:3000: 1
        type: roundrobin
      plugins:
        proxy-rewrite:
          uri: /services/data-service/.well-known/openid-configuration
    
    - uri: /.well-known/data-space-configuration
      host: mp-data-service.127.0.0.1.nip.io
      upstream:
        nodes:
          dsconfig:3002: 1
        type: roundrobin
      plugins:
        proxy-rewrite:
          uri: /.well-known/data-space-configuration/data-space-configuration.json
        response-rewrite:
          headers:
            set:
              content-type: application/json
    
    - uri: /*
      host: mp-data-service.127.0.0.1.nip.io
      upstream:
        nodes:
          data-service-scorpio:9090: 1
        type: roundrobin
      plugins:
        # verify the jwt at the verifiers endpoint
        openid-connect:
          bearer_only: true
          use_jwks: true
          client_id: data-service
          client_secret: unused
          ssl_verify: false
          discovery: http://verifier:3000/services/data-service/.well-known/openid-configuration
        # request decisions at opa
        opa:
          host: "http://localhost:8181"
          policy: policy/main
          with_body: true
    
    - uri: /.well-known/openid-configuration
      host: mp-tmf-api.127.0.0.1.nip.io
      upstream:
        nodes:
          verifier:3000: 1
        type: roundrobin
      plugins:
        proxy-rewrite:
          uri: /services/tmf-api/.well-known/openid-configuration

    - uri: /*
      host: mp-tmf-api.127.0.0.1.nip.io
      upstream:
        nodes:
          tm-forum-api:8080: 1
        type: roundrobin
      plugins:
        openid-connect:
          bearer_only: true
          use_jwks: true
          client_id: contract-management
          client_secret: unused
          ssl_verify: false
          discovery: http://verifier:3000/services/tmf-api/.well-known/openid-configuration
        opa:
          host: "http://localhost:8181"
          policy: policy/main
          with_body: true
    
    - uri: /.well-known/openid-configuration
      host: rustapitest.127.0.0.1.nip.io
      upstream:
        nodes:
          verifier:3000: 1
        type: roundrobin
      plugins:
        proxy-rewrite:
          uri: /services/rustapitest-service/.well-known/openid-configuration

    - uri: /.well-known/data-space-configuration
      host: rustapitest.127.0.0.1.nip.io
      upstream:
        nodes:
          dsconfig:3002: 1
        type: roundrobin
      plugins:
        proxy-rewrite:
          uri: /.well-known/data-space-configuration/data-space-configuration.json
        response-rewrite:
          headers:
            set:
              content-type: application/json

    - uri: /*
      host: rustapitest.127.0.0.1.nip.io
      upstream:
        nodes:
          provider-dsc-apisix-control-plane:8085: 1
        type: roundrobin
      plugins:
        # verify the jwt at the verifiers endpoint
        openid-connect:
          bearer_only: true
          use_jwks: true
          client_id: rustapitest-service
          client_secret: unused
          ssl_verify: false
          discovery: http://verifier:3000/services/rustapitest-service/.well-known/openid-configuration
        # request decisions at opa
        opa:
          host: "http://localhost:8181"
          policy: policy/main
          with_body: true

# -- Open Policy Agent - PDP
opa:
  # -- should an opa sidecar be deployed to apisix
  enabled: true

# -- ODRL-PAP
odrl-pap:
  additonalEnvVars:
    # needs to know the provider's identity
    - name: GENERAL_ORGANIZATION_DID
      value: "did:key:zDnaee6Q14pEC1F9e4buW5PdQMDpq3NCTDUycBQ6PuLyri1oA"
  ingress:
    enabled: true
    hosts:
      - host: pap-provider.127.0.0.1.nip.io
        paths:
          - "/"

# -- Postgres database for ODRL-PAP
postgresql:
  primary:
    persistence:
      enabled: true      
      # use one of the classes provided by your cluster
      storageClass: local-path

# -- Scorpio - Data Service
scorpio:
  enabled: true

  # ingress configuration for the data service
  ingress:
    enabled: true
    hosts:
      - host: scorpio-federator.127.0.0.1.nip.io
        paths:
          - "/"

  # configuration for the dataservice at the credentials-config-service
  ccs:
    defaultOidcScope:
      name: default
    oidcScopes:
      default:
        - type: UserCredential
          trustedParticipantsLists:
            - http://tir.trust-anchor.svc.cluster.local:8080
          trustedIssuersLists:
            - http://trusted-issuers-list:8080
      operator:
        - type: OperatorCredential
          trustedParticipantsLists:
            - http://tir.trust-anchor.svc.cluster.local:8080
          trustedIssuersLists:
            - http://trusted-issuers-list:8080

# -- Postgis database for Scorpio
postgis:
  primary:
    persistence:
      enabled: true      
      # use one of the classes provided by your cluster
      storageClass: local-path


## TMForumAPI Services

# -- TMForum APIs to support contracting
tm-forum-api:
  registration:
    ccs:
      defaultOidcScope:
        credentialType: UserCredential
        trustedParticipantsLists: http://tir.trust-anchor.svc.cluster.local:8080
  ingress:
    enabled: true
    hosts:
      - host: tm-forum-api.127.0.0.1.nip.io
        paths:
          - /

# -- Contract Management
# contract management component and the credential type it should register for a bought service
contract-management:
  enabled: true
  til:
    credentialType: OperatorCredential

## Data Space Config Service
# serves configuration of the dataspace
dataSpaceConfig:
  enabled: true
  
  ## Defaults
  serviceType: ClusterIP
  port: 3002
  supportedModels:
    - "https://raw.githubusercontent.com/smart-data-models/dataModel.Consumption/master/ConsumptionPoint/schema.json"
    - "https://raw.githubusercontent.com/smart-data-models/dataModel.Consumption/master/ConsumptionCost/schema.json"
  supportedProtocols:
    - http
    - https
  authenticationProtocols:
    - oid4vp


## Excluded services

# -- Credentials issuance is not required in this case
keycloak:
  enabled: false
